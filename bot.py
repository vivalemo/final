import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '7894167889:AAFkMxHoHKyq9YGULkaYa53bfuVdQVd287k'
ADMIN_ID = 1829792326  # –í–∞—à Telegram ID

# === –î–ê–ù–ù–´–ï ===
DATA_FILE = 'workers.json'

def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –ö–û–ú–ê–ù–î–ê /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    teams = ["–õ–Æ–¢–´–ô", "–ë–û–°–°", "–ú–ï–•–ê–ù–ò–ö"]
    keyboard = [[InlineKeyboardButton(team, callback_data=f"team_{team}")] for team in teams]
    keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=InlineKeyboardMarkup(keyboard))

# === –í–´–ë–û–† –ö–û–ú–ê–ù–î–´ ===
async def team_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    team = query.data.split("_")[1]
    context.user_data['team'] = team

    data = load_data()
    users = data.get(team, {})
    keyboard = [[InlineKeyboardButton(name, callback_data=f"user_{name}")] for name in users]
    keyboard.append([InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è:", reply_markup=InlineKeyboardMarkup(keyboard))

# === –í–´–ë–û–† –ú–ï–ù–ï–î–ñ–ï–†–ê ===
async def user_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    username = query.data.split("_")[1]
    context.user_data['username'] = username

    keyboard = [
        [KeyboardButton("–ù–ê –†–ê–ë–û–¢–ï")],
        [KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    await query.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {username}! –û—Ç–º–µ—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ù–ê –†–ê–ë–û–¢–ï":
        team = context.user_data.get('team')
        username = context.user_data.get('username')
        if not team or not username:
            await update.message.reply_text("–û—à–∏–±–∫–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —Å–µ–±—è.")
            return
        data = load_data()
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data[team][username] = {"status": "–Ω–∞ —Ä–∞–±–æ—Ç–µ", "–ø—Ä–∏—Ö–æ–¥": now}
        save_data(data)
        await update.message.reply_text("–¢—ã –æ—Ç–º–µ—Ç–∏–ª —Å–≤–æ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ. –•–æ—Ä–æ—à–µ–π —Å–º–µ–Ω—ã! ‚úÖ")

    elif text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await start(update, context)

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–∫–Ω–æ–ø–∫–∞) ===
async def show_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await show_stats(update.callback_query.message, context)

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê (—Ñ—É–Ω–∫—Ü–∏—è) ===
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"

    total = 0
    present = 0
    absent = 0

    for team, users in data.items():
        team_total = len(users)
        team_present = sum(1 for u in users.values() if u.get("status") == "–Ω–∞ —Ä–∞–±–æ—Ç–µ")
        team_absent = team_total - team_present

        text += f"\nüë• –ö–æ–º–∞–Ω–¥–∞: {team} ‚Äî üü¢ {team_present} / üî¥ {team_absent}\n"
        for name, info in users.items():
            status = info.get("status", "–Ω–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ")
            time = info.get("–ø—Ä–∏—Ö–æ–¥", "‚Äî")
            icon = "üü¢" if status == "–Ω–∞ —Ä–∞–±–æ—Ç–µ" else "üî¥"
            text += f"{icon} {name}: {status} ({time})\n"

        total += team_total
        present += team_present
        absent += team_absent

    text += f"\nüì¶ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {total} | üü¢ –ù–∞ —Ä–∞–±–æ—Ç–µ: {present} | üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {absent}"

    await update.reply_text(text)

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ö–ù–û–ü–ö–û–ô ===
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await start(update.callback_query.message, context)

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê (–ê–î–ú–ò–ù) ===
async def add_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add –∫–æ–º–∞–Ω–¥–∞ –∏–º—è")
        return
    team = context.args[0]
    name = " ".join(context.args[1:])
    data = load_data()
    data.setdefault(team, {})[name] = {"status": "–Ω–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ"}
    save_data(data)
    await update.message.reply_text(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É {team}.")

# === –£–î–ê–õ–ï–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê (–ê–î–ú–ò–ù) ===
async def del_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /del –∫–æ–º–∞–Ω–¥–∞ –∏–º—è")
        return
    team = context.args[0]
    name = " ".join(context.args[1:])
    data = load_data()
    if team in data and name in data[team]:
        del data[team][name]
        save_data(data)
        await update.message.reply_text(f"‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä {name} —É–¥–∞–ª—ë–Ω.")
    else:
        await update.message.reply_text("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –í 19:00 ===
def auto_reset():
    data = load_data()
    for team in data:
        for name in data[team]:
            data[team][name]["status"] = "–Ω–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ"
            data[team][name]["–ø—Ä–∏—Ö–æ–¥"] = "-"
    save_data(data)
    print("[INFO] –°—Ç–∞—Ç—É—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã –≤ 19:00.")

# === MAIN ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ 19:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    scheduler = BackgroundScheduler()
    scheduler.add_job(auto_reset, 'cron', hour=19, minute=0)
    scheduler.start()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(CommandHandler("add", add_manager))
    app.add_handler(CommandHandler("del", del_manager))
    app.add_handler(CallbackQueryHandler(team_select, pattern="^team_"))
    app.add_handler(CallbackQueryHandler(user_select, pattern="^user_"))
    app.add_handler(CallbackQueryHandler(show_stats_callback, pattern="^show_stats$"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == '__main__':
    main()